// <copyright file="FormulaSyntaxTests.cs" company="UofU-CS3500">
//   Copyright 2024 UofU-CS3500. All rights reserved.
// </copyright>
// <authors> Breanna Giang </authors>
// <date> August 21, 2024 </date>

namespace CS3500.FormulaTests;

// using CS3500.Formula1; // Change this using statement to use different formula implementations.
 using CS3500.Formula2;
// using CS3500.Formula3;

/// <summary>
///   <para>
///     The following class shows the basics of how to use the MSTest framework,
///     including:
///   </para>
///   <list type="number">
///     <item> How to catch exceptions. </item>
///     <item> How a test of valid code should look. </item>
///   </list>
/// </summary>
[TestClass]
public class FormulaSyntaxTests
{
    // --- Tests for One Token Rule ---

    /// <summary>
    ///   <para>
    ///     This test makes sure the right kind of exception is thrown
    ///     when trying to create a formula with no tokens.
    ///   </para>
    ///   <remarks>
    ///     <list type="bullet">
    ///       <item>
    ///         We use the _ (discard) notation because the formula object
    ///         is not used after that point in the method.  Note: you can also
    ///         use _ when a method must match an interface but does not use
    ///         some of the required arguments to that method.
    ///       </item>
    ///       <item>
    ///         string.Empty is often considered best practice (rather than using "") because it
    ///         is explicit in intent (e.g., perhaps the coder forgot to but something in "").
    ///       </item>
    ///       <item>
    ///         The name of a test method should follow the MS standard:
    ///         https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices
    ///       </item>
    ///       <item>
    ///         All methods should be documented, but perhaps not to the same extent
    ///         as this one.  The remarks here are for your educational
    ///         purposes (i.e., a developer would assume another developer would know these
    ///         items) and would be superfluous in your code.
    ///       </item>
    ///       <item>
    ///         Notice the use of the attribute tag [ExpectedException] which tells the test
    ///         that the code should throw an exception, and if it doesn't an error has occurred;
    ///         i.e., the correct implementation of the constructor should result
    ///         in this exception being thrown based on the given poorly formed formula.
    ///       </item>
    ///     </list>
    ///   </remarks>
    ///   <example>
    ///     <code>
    ///        // here is how we call the formula constructor with a string representing the formula
    ///        _ = new Formula( "5+5" );
    ///     </code>
    ///   </example>
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestNoTokens_Invalid()
    {
        _ = new Formula(" ");  // note: it is arguable that you should replace "" with string.Empty for readability and clarity of intent (e.g., not a cut and paste error or a "I forgot to put something there" error).
    }

    /// <summary>
    ///   <remarks>
    ///     This is an example of a test that is not expected to throw an exception, i.e., it succeeds
    ///     beause it has a number token
    ///   </remarks>
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestHasTokenNumber_Valid()
    {
        _ = new Formula("1");
    }

    /// <summary>
    ///     This is an example of a test that should not throw an exception.
    ///     There is one valid variable token.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestHasTokenVariable_Valid()
    {
        _ = new Formula("xyz3");
    }

    // --- Tests for Valid Token Rule ---

    /// <summary>
    ///   <para>
    ///     Make sure a simple well formed formula is accepted by the constructor (the constructor
    ///     should not throw an exception).
    ///   </para>
    ///   <remarks>
    ///     This is an example of a test that is not expected to throw an exception, i.e., it succeeds.
    ///     In other words, the formula "1-1" is a valid formula which should not cause any errors.
    ///   </remarks>
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestValidTokenRule_Valid()
    {
        _ = new Formula("1-1");
    }

    /// <summary>
    ///     This is an example of a test that should throw an exception because there
    ///     is an invalid token in the formula.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestValidTokenRuleSquiggle_Invalid()
    {
        _ = new Formula("~");
    }

    /// <summary>
    ///     This is an example of a test that should throw an exception because there
    ///     is an invalid variable token. All letters should be followed by a digit.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestValidTokenRuleVariable_Invalid()
    {
        _ = new Formula("a");
    }

    /// <summary>
    ///     This is an example of a test that should not throw an exception because there
    ///     is all valid tokens in the formula.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestValidTokenRule_AllValidTokens()
    {
        _ = new Formula("1+2*3/4-5*(23*2)");
    }

    /// <summary>
    ///     This is an example of a test that should not throw an exception because there
    ///     is all valid tokens in the formula.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestValidTokenRuleWithWhitespace_ValidTokens()
    {
        _ = new Formula("8 * 9");
    }

    /// <summary>
    ///     This is an example of a test that should throw an exception because there
    ///     is an invalid tokens in the formula.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]

    public void FormulaConstructor_TestValidTokenRule_InvalidTokens()
    {
        _ = new Formula("$");
    }

    /// <summary>
    ///     This is an example of a test that should not throw an exception because there
    ///     is a valid number token.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestValidTokenRuleExponent_Valid()
    {
        _ = new Formula("2e5");
    }

    /// <summary>
    ///     This is an example of a test that should not throw an exception because there
    ///     is a valid scientific notated token.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestValidTokenRuleNotatedUpperCase_Valid()
    {
        _ = new Formula("3.5E-6");
    }

    /// <summary>
    ///     This is an example of a test that should not throw an exception because there
    ///     is a valid scientific notated token.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestValidTokenRuleNotatedLowerCase_Valid()
    {
        _ = new Formula("3.5e-6");
    }

    /// <summary>
    ///     This is an example of a test that should throw an exception because after
    ///     the split, there is an invalid variable token i.e. 'b'.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestValidTokenRuleVariableSplit_Invalid()
    {
        _ = new Formula("abc2b");
    }

    // --- Tests for Closing Parenthesis Rule

    /// <summary>
    ///     This is an example of a test that is should throw an exception because there
    ///     is one more parentheses closing than there should be.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestClosingParenthesesOneMore_Invalid()
    {
        _ = new Formula("(1+3)*1)");
    }

    /// <summary>
    ///     This is an example of a test that should throw an exception because there
    ///     is only one parentheses and you can't start a formula with a closing one.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestClosingParentheses_InvalidBecauseOfOrder()
    {
        _ = new Formula(")(");
    }

    // --- Tests for Balanced Parentheses Rule

    /// <summary>
    ///   <para>
    ///     Make sure a simple well formed formula is accepted by the constructor (the constructor
    ///     should not throw an exception).
    ///   </para>
    ///   <remarks>
    ///     This is an example of a test that is not expected to throw an exception, i.e., it succeeds.
    ///     In other words, the formula "(1+1)" is a valid formula which should not cause any errors
    ///     because it has balanced parentheses
    ///   </remarks>
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestBalanced_Valid()
    {
        _ = new Formula("(1+1)");
    }

    /// <summary>
    ///     This is an example of a test that is should throw an exception because there
    ///     is only one parentheses.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestBalancedOneParentheses_Invalid()
    {
        _ = new Formula("(");
    }

    /// <summary>
    ///     This is an example of a test that should throw an exception because there
    ///     is only one parentheses and you can't start a formula with a closing one.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestBalancedClosedParentheses_Invalid()
    {
        _ = new Formula(")");
    }

    /// <summary>
    ///     This is an example of a test that should throw an exception because
    ///     the following rules not met even though the balanced rule is.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestBalanced_GoodButFollowingInvalid()
    {
        _ = new Formula("()");
    }

    /// <summary>
    ///     This is an example of a test that should throw an exception because there
    ///     is only one parentheses. It is not balanced.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestBalanced_Invalid()
    {
        _ = new Formula("(5+guy");
    }

    /// <summary>
    ///     This is an example of a test that should not throw an exception 
    ///     because it is balanced.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestNestedLongBalancedParentheses_Valid()
    {
        _ = new Formula("((((1+2)+3)+4)+5)");
    }

    // --- Tests for First Token Rule

    /// <summary>
    ///   <para>
    ///     Make sure a simple well formed formula is accepted by the constructor (the constructor
    ///     should not throw an exception).
    ///   </para>
    ///   <remarks>
    ///     This is an example of a test that is not expected to throw an exception, i.e., it succeeds.
    ///     In other words, the formula "1+1" is a valid formula which should not cause any errors.
    ///   </remarks>
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestFirstTokenNumber_Valid()
    {
        _ = new Formula("1+1");
    }

    /// <summary>
    ///     This is an example of a test that is expected to throw an exception
    ///     beause it has an operation token first which isn't right.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestFirstTokenIsOperator_Invalid()
    {
        _ = new Formula("*");
    }

    /// <summary>
    ///     This is an example of a test that is expected to pass because
    ///     the first token is a variable. All rules are met.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestFirstTokenIsVariable_Valid()
    {
        _ = new Formula("abc123 + 1");
    }

    /// <summary>
    ///     This is an example of a test that is should not throw an exception
    ///     because all requirements are met.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestFirstTokenParentheses_Valid()
    {
        _ = new Formula("(23)");
    }

    // --- Tests for  Last Token Rule ---

    /// <summary>
    ///     This is an example of a test that is expected to throw an exception
    ///     because there are more closing parentheses than opening ones.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestLastToken_Paranthases_Invalid()
    {
        _ = new Formula("1+1)");
    }

    /// <summary>
    ///     This is an example of a test that is expected to throw because
    ///     the parentheses aren't balanced even though the last token is fine.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestLastTokenNumber_Valid()
    {
        _ = new Formula("(3/5");
    }

    /// <summary>
    ///     This is an example of a test that is not expected to throw an
    ///     exception. Its last token is a variable.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestLastTokenVariable_Valid()
    {
        _ = new Formula("1+a1");
    }

    /// <summary>
    ///     This is an example of a test that is not expected to throw an
    ///     exception. Its last token is a number.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestLastTokenNum_Valid()
    {
        _ = new Formula("1+2e5");
    }

    // --- Tests for Parentheses/Operator Following Rule ---

    /// <summary>
    ///     This is an example of a test that is not expected to throw an exception.
    ///     It has a variable following an opening parentheses multiplied by another
    ///     variable.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestFollowingRuleVariable_Valid()
    {
        _ = new Formula("(abc12*a1)");
    }

    /// <summary>
    ///     This is an example of a test that is not expected to throw an exception.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestFollowingAfterOperatorNum_Valid()
    {
        _ = new Formula("AAab1 - 3");
    }

    /// <summary>
    ///     This is an example of a test that is not expected to throw an exception.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestFollowingAfterOperatorOpening_Valid()
    {
        _ = new Formula("45/(2+2)");
    }

    /// <summary>
    ///     This is an example of a test that is expected to throw an exception.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestFollowingAfterOperatorAfterOperator_Invalid()
    {
        _ = new Formula("5**5");
    }

    /// <summary>
    ///     This is an example of a test that is expected to throw an exception.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestFollowingAfterOperatorIsNothing_Invalid()
    {
        _ = new Formula("1*");
    }

    /// <summary>
    ///     This is an example of a test that is expected to throw an exception.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestFollowingBeforeOperatorIsNothing_Invalid()
    {
        _ = new Formula("*6");
    }

    // --- Tests for Extra Following Rule ---

    /// <summary>
    ///     This is an example of a test that is not expected to throw an exception.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestExtraFollowingAfterNum_Valid()
    {
        _ = new Formula("45/2");
    }

    /// <summary>
    ///     This is an example of a test that is not expected to throw an exception.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestExtraFollowingAfterVariable_Valid()
    {
        _ = new Formula("hello35/2");
    }

    /// <summary>
    ///     This is an example of a test that is not expected to throw an exception.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestExtraFollowingAfterClosing_Valid()
    {
        _ = new Formula("((junior1+2))");
    }

    /// <summary>
    ///     This is an example of a test that is not expected to throw an exception.
    /// </summary>
    [TestMethod]
    public void FormulaConstructor_TestExtraFollowingAfterWithVariable_Valid()
    {
        _ = new Formula("elmo2*elmo9");
    }

    /// <summary>
    ///     This is an example of a test that is expected to throw an exception.
    /// </summary>
    [TestMethod]
    [ExpectedException(typeof(FormulaFormatException))]
    public void FormulaConstructor_TestExtraFollowingRandomTokens_Invalid()
    {
        _ = new Formula("1abc2a-x2");
    }

}
